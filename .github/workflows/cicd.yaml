name: CI/CD

on:
  push:
    branches:
      - "master"
      - "[0-9].[0-9]*"
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      use_dashboard:
        description: 'Use Cypress Dashboard (true/false)'
        required: false
        default: 'false'
      ref:
        description: 'The branch or tag to checkout'
        required: false
        default: ''
      pr_id:
        description: 'The pull request ID to checkout'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  python-unit:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: ["previous", "current"]
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      - name: Check for file changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Python
        uses: ./.github/actions/setup-backend/
        if: steps.check.outputs.python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run Unit Tests
        if: steps.check.outputs.python
        env:
          SUPERSET_TESTENV: true
          SUPERSET_SECRET_KEY: not-a-secret
        run: |
          pytest --durations-min=0.5 --cov-report= --cov=superset ./tests/common ./tests/unit_tests --cache-clear --maxfail=50
      - name: Upload Code Coverage
        uses: codecov/codecov-action@v5
        with:
          flags: python,unit
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  python-integration:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        db: [mysql, postgres, sqlite]
        python-version: ["previous", "current"]
    env:
      PYTHONPATH: ${{ github.workspace }}
      SUPERSET_CONFIG: tests.integration_tests.superset_test_config
      REDIS_PORT: 16379
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 16379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      - name: Setup Python
        uses: ./.github/actions/setup-backend/
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup DB Services
        run: |
          if [ "${{ matrix.db }}" == "mysql" ]; then
            docker run -d -p 13306:3306 --name mysql \
              -e MYSQL_ROOT_PASSWORD=root \
              -e MYSQL_DATABASE=superset \
              -e MYSQL_USER=superset \
              -e MYSQL_PASSWORD=superset \
              mysql:8.0
            export SUPERSET__SQLALCHEMY_DATABASE_URI=mysql+mysqldb://superset:superset@127.0.0.1:13306/superset?charset=utf8mb4&binary_prefix=true
          elif [ "${{ matrix.db }}" == "postgres" ]; then
            docker run -d -p 15432:5432 --name postgres \
              -e POSTGRES_USER=superset \
              -e POSTGRES_PASSWORD=superset \
              -e POSTGRES_DB=superset \
              postgres:16-alpine
            export SUPERSET__SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://superset:superset@127.0.0.1:15432/superset
          else
            mkdir -p ${{ github.workspace }}/.temp
            export SUPERSET__SQLALCHEMY_DATABASE_URI=sqlite:///${{ github.workspace }}/.temp/superset.db?check_same_thread=true
          fi
      - name: Start Celery Worker
        run: ./.github/actions/cached-dependencies/run-celery.sh
      - name: Run Integration Tests
        run: ./scripts/python_tests.sh
      - name: Upload Code Coverage
        uses: codecov/codecov-action@v5
        with:
          flags: python,${{ matrix.db }}
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  python-build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        build_preset: ["dev", "lean"]
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_TAG: apache/superset:GHA-${{ matrix.build_preset }}-${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Docker
        uses: ./.github/actions/setup-docker
        with:
          dockerhub-user: ${{ secrets.DOCKERHUB_USER }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          build: "true"
      - name: Build Docker Image
        run: |
          docker build --build-arg INCLUDE_CHROMIUM=false -t $IMAGE_TAG .
      - name: Sanity Check Compose
        run: |
          export SUPERSET_BUILD_TARGET=${{ matrix.build_preset }}
          docker compose build superset-init --build-arg DEV_MODE=false --build-arg INCLUDE_CHROMIUM=false
          docker compose up superset-init --exit-code-from superset-init

  frontend:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Frontend Build
        run: |
          npm ci
          npm run build
      - name: Run Tests
        run: npm test
      - name: ESLint
        run: npm run eslint
      - name: TypeScript Check
        run: npm run type

  e2e:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        parallel_id: [0, 1, 2, 3, 4, 5]
        browser: ["chrome"]
        app_root: ["", "/app/prefix"]
    env:
      SUPERSET_ENV: development
      SUPERSET_CONFIG: tests.integration_tests.superset_test_config
      SUPERSET__SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://superset:superset@127.0.0.1:15432/superset
      PYTHONPATH: ${{ github.workspace }}
      REDIS_PORT: 16379
      USE_DASHBOARD: ${{ github.event.inputs.use_dashboard == 'true' || 'false' }}
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: superset
          POSTGRES_PASSWORD: superset
        ports:
          - 15432:5432
      redis:
        image: redis:7-alpine
        ports:
          - 16379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: ./.github/actions/setup-backend/
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: './superset-frontend/.nvmrc'
      - name: Install Dependencies
        run: npm ci && npm run build
      - name: Install Cypress
        run: npm run cypress-install
      - name: Run Cypress
        run: npm run cypress-run-all $USE_DASHBOARD ${{ matrix.app_root }}
      - name: Upload Screenshots (if any)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: superset-frontend/cypress-base/cypress/screenshots
          name: cypress-artifact-${{ github.run_id }}-${{ github.job }}-${{ matrix.browser }}-${{ matrix.parallel_id }}

  # deploy:
  #   needs: [python-unit, python-integration, python-build, frontend, e2e]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #   steps:
  #     - name: Setup SSH key
  #       run: |
  #         echo "$EC2_SSH_KEY" | base64 -d > ec2_key.pem
  #         chmod 600 ec2_key.pem
  #       env:
  #         EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

  #     - name: Deploy to EC2
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
  #           cd /opt/superset
  #           docker compose pull
  #           docker compose up -d
  #         EOF
