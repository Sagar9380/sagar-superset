# CI/CD pipeline for Superset application

name: CI/CD

on:
  push:
    branches:
      - "master"
      - "[0-9].[0-9]*"
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      use_dashboard:
        description: 'Use Cypress Dashboard (true/false)'
        required: false
        default: 'false'
      ref:
        description: 'The branch or tag to checkout'
        required: false
        default: ''
      pr_id:
        description: 'The pull request ID to checkout'
        required: false
        default: ''

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:

  python-unit:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: ["previous", "current"]
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      # - name: Check for file changes
      #   id: check
      #   uses: ./.github/actions/change-detector/
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Python
        uses: ./.github/actions/setup-backend/
        if: steps.check.outputs.python
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run Unit Tests
        if: steps.check.outputs.python
        env:
          SUPERSET_TESTENV: true
          SUPERSET_SECRET_KEY: not-a-secret
        run: |
          pytest --durations-min=0.5 --cov-report= --cov=superset ./tests/common ./tests/unit_tests --cache-clear --maxfail=50

  python-integration:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        db: [mysql, postgres, sqlite]
    env:
      PYTHONPATH: ${{ github.workspace }}
      SUPERSET_CONFIG: tests.integration_tests.superset_test_config
      REDIS_PORT: 16379
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
        ports: [13306:3306]
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: superset
          POSTGRES_PASSWORD: superset
        ports: [15432:5432]
      redis:
        image: redis:7-alpine
        ports: [16379:6379]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      - name: Check for file changes
        id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Python
        uses: ./.github/actions/setup-backend/
        if: steps.check.outputs.python
      - name: Setup DB & Celery
        uses: ./.github/actions/cached-dependencies
        with:
          run: |
            setup-${{ matrix.db }}
            celery-worker
      - name: Run Integration Tests
        if: steps.check.outputs.python
        run: ./scripts/python_tests.sh

  python-build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        build_preset: ["dev", "lean"]
    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      IMAGE_TAG: apache/superset:GHA-${{ matrix.build_preset }}-${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: ./.github/actions/setup-docker
        with:
          dockerhub-user: ${{ secrets.DOCKERHUB_USER }}
          dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}
          build: true
      - uses: ./.github/actions/setup-supersetbot/
      - run: |
          supersetbot docker --load --preset ${{ matrix.build_preset }} --extra-flags "--build-arg INCLUDE_CHROMIUM=false --tag $IMAGE_TAG" --platform linux/amd64
      - run: |
          docker compose build superset-init --build-arg DEV_MODE=false --build-arg INCLUDE_CHROMIUM=false
          docker compose up superset-init --exit-code-from superset-init

  frontend:
    runs-on: ubuntu-24.04
    outputs:
      should-run: ${{ steps.check.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          docker buildx build -t $TAG --target superset-node-ci .
      - run: docker save $TAG | gzip > docker-image.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar.gz

  e2e:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        parallel_id: [0, 1, 2, 3, 4, 5]
        browser: ["chrome"]
        app_root: ["", "/app/prefix"]
    env:
      SUPERSET_ENV: development
      SUPERSET_CONFIG: tests.integration_tests.superset_test_config
      SUPERSET__SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://superset:superset@127.0.0.1:15432/superset
      PYTHONPATH: ${{ github.workspace }}
      REDIS_PORT: 16379
      USE_DASHBOARD: ${{ github.event.inputs.use_dashboard == 'true' || 'false' }}
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: superset
          POSTGRES_PASSWORD: superset
        ports: [15432:5432]
      redis:
        image: redis:7-alpine
        ports: [16379:6379]
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive
      - id: check
        uses: ./.github/actions/change-detector/
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: ./.github/actions/setup-backend/
      - uses: ./.github/actions/cached-dependencies
        with:
          run: |
            setup-postgres
            testdata
            npm-install
            build-instrumented-assets
            cypress-install
      - uses: ./.github/actions/cached-dependencies
        env:
          CYPRESS_BROWSER: ${{ matrix.browser }}
          PARALLEL_ID: ${{ matrix.parallel_id }}
          PARALLELISM: 6
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          NODE_OPTIONS: "--max-old-space-size=4096"
        with:
          run: cypress-run-all ${{ env.USE_DASHBOARD }} ${{ matrix.app_root }}
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          path: ${{ github.workspace }}/superset-frontend/cypress-base/cypress/screenshots
          name: cypress-artifact-${{ github.run_id }}-${{ github.job }}-${{ matrix.browser }}-${{ matrix.parallel_id }}

  # Uncomment to enable deployment
  # deploy:
  #   name: Deploy to EC2
  #   needs: [python-unit, python-integration, python-build, frontend, e2e]
  #   runs-on: ubuntu-24.04
  #   if: github.ref == 'refs/heads/master' && github.event_name == 'push'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Decode SSH key
  #       run: |
  #         echo "$EC2_SSH_KEY" | base64 -d > ec2_key.pem
  #         chmod 600 ec2_key.pem
  #     - name: Deploy via SSH
  #       run: |
  #         ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
  #           cd /home/ec2-user/superset
  #           git pull origin master
  #           docker compose pull
  #           docker compose up -d
  #         EOF
